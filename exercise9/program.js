var http = require('http');
const BufferList = require('bl');

var url1 = process.argv[2];
var url2 = process.argv[3];
var url3 = process.argv[4];

var buffers = {};
buffers[url1] = new BufferList();
buffers[url2] = new BufferList();
buffers[url3] = new BufferList();

var done = {};
done[url1] = false;
done[url2] = false;
done[url3] = false;

var fetchFinished = function() {
	var finished = done[url1] && done[url2] && done[url3];
	if (finished) {
		console.log(buffers[url1].toString());
		console.log(buffers[url2].toString());
		console.log(buffers[url3].toString());
	}
}

http.get(url1, function(responseStream) {
	responseStream.on("data", function(data) { // data is a single buffer, generated by the stream with the data event
		buffers[url1].append(data.toString())
	})
	responseStream.on("end", function(data) { // end emitted when the stream is done (flushed, closed)
		done[url1] = true;
		fetchFinished();
	})
});

http.get(url2, function(responseStream) {
	responseStream.on("data", function(data) { // data is a single buffer, generated by the stream with the data event
		buffers[url2].append(data.toString())
	})
	responseStream.on("end", function(data) { // end emitted when the stream is done (flushed, closed)
		done[url2] = true;
		fetchFinished();
	})
});

http.get(url3, function(responseStream) {
	responseStream.on("data", function(data) { // data is a single buffer, generated by the stream with the data event
		buffers[url3].append(data.toString())
	})
	responseStream.on("end", function(data) { // end emitted when the stream is done (flushed, closed)
		done[url3] = true;
		fetchFinished();
	})
});

